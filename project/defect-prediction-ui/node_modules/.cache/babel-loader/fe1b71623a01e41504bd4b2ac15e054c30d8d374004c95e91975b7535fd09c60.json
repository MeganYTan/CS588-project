{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megta\\\\Desktop\\\\School\\\\Fall 2023\\\\CS588 Software Eng\\\\Project\\\\project\\\\defect-prediction\\\\src\\\\CSVUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CSVUploader() {\n  _s();\n  const [total, setTotal] = useState([1]);\n  const [openAPIResponse, setOpenAPIResponse] = useState(\"\");\n  const [data, setData] = useState({});\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('file', file);\n    fetch('http://localhost:5000/upload-csv', {\n      method: 'POST',\n      body: formData\n    }).then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      } else {\n        return response.json().then(data => {\n          throw new Error(data.error || 'Server error');\n        });\n      }\n    }).then(data => {\n      setTotal(data.total_defects);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const get = event => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('file', file);\n    fetch('http://localhost:5000', {\n      method: 'GET'\n      // body: formData,\n    }).then(response => {\n      console.log(response);\n      if (response.ok) {\n        return response.json();\n      } else {\n        return response.json().then(data => {\n          throw new Error(data.error || 'Server error');\n        });\n      }\n    }).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const getCSVData = file => {\n    Papa.parse(file, {\n      complete: result => {\n        console.log(result);\n        setData(result.data);\n      },\n      header: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"25vh\",\n        width: \"60vw\",\n        marginLeft: \"20vw\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Random Forest Regression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Total:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: total.map(i => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: i\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"OpenAI API Prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Total: \", total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(CSVUploader, \"cWuBdHz6eDy0xJUVLLHI8j3nY8E=\");\n_c = CSVUploader;\nexport default CSVUploader;\nvar _c;\n$RefreshReg$(_c, \"CSVUploader\");","map":{"version":3,"names":["React","useState","Papa","jsxDEV","_jsxDEV","Fragment","_Fragment","CSVUploader","_s","total","setTotal","openAPIResponse","setOpenAPIResponse","data","setData","handleFileChange","event","file","target","files","formData","FormData","append","fetch","method","body","then","response","console","log","ok","json","Error","error","total_defects","catch","get","getCSVData","parse","complete","result","header","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","marginTop","width","marginLeft","map","i","_c","$RefreshReg$"],"sources":["C:/Users/megta/Desktop/School/Fall 2023/CS588 Software Eng/Project/project/defect-prediction/src/CSVUploader.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nfunction CSVUploader() {\r\n    const [total, setTotal] = useState([1]);\r\n    const [openAPIResponse, setOpenAPIResponse] = useState(\"\");\r\n    const [data, setData] = useState({});\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        fetch('http://localhost:5000/upload-csv', {\r\n            method: 'POST',\r\n            body: formData,\r\n        })\r\n            .then(response => {\r\n                console.log(response);\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    return response.json().then(data => {\r\n                        throw new Error(data.error || 'Server error');\r\n                    });\r\n                }\r\n            })\r\n            .then(data => {\r\n                setTotal(data.total_defects);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n    const get = (event) => {\r\n        const file = event.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        fetch('http://localhost:5000', {\r\n            method: 'GET',\r\n            // body: formData,\r\n        })\r\n            .then(response => {\r\n                console.log(response);\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    return response.json().then(data => {\r\n                        throw new Error(data.error || 'Server error');\r\n                    });\r\n                }\r\n            })\r\n            .then(data => {\r\n                console.log(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n\r\n    const getCSVData = (file) => {\r\n        Papa.parse(file, {\r\n            complete: (result) => {\r\n                console.log(result);\r\n                setData(result.data);\r\n            },\r\n            header: true\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" accept=\".csv\" onChange={handleFileChange} />\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"25vh\", width: \"60vw\", marginLeft: \"20vw\" }}>\r\n                <div>\r\n                    <h2>Random Forest Regression</h2>\r\n                    <div>Total:\r\n                        <ul>\r\n                            {total.map(i => (\r\n                                <li>{i}</li>\r\n                            ))}\r\n                        </ul></div>\r\n                </div>\r\n                <div>\r\n                    <h2>OpenAI API Prediction</h2>\r\n                    <span>Total: {total}</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CSVUploader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}