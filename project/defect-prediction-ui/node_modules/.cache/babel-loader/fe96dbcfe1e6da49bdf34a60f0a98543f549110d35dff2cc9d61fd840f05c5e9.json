{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megta\\\\Desktop\\\\School\\\\Fall 2023\\\\CS588 Software Eng\\\\Project\\\\project\\\\defect-prediction\\\\src\\\\CSVUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CSVUploader() {\n  _s();\n  const [total, setTotal] = useState(0);\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    parseCSV(file);\n  };\n  const parseCSV = file => {\n    Papa.parse(file, {\n      complete: result => {\n        calculateTotal(result.data);\n      },\n      header: true\n    });\n  };\n  const calculateTotal = data => {\n    let totalValue = 0;\n    data.forEach(row => {\n      // Assuming the column containing the values is named 'Amount'\n      const amount = parseFloat(row.Amount);\n      if (!isNaN(amount)) {\n        totalValue += amount;\n      }\n    });\n    setTotal(totalValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"40vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Total: \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(CSVUploader, \"YrYAKhMVdpUi2JZbV3/SqAFSKPg=\");\n_c = CSVUploader;\nexport default CSVUploader;\nvar _c;\n$RefreshReg$(_c, \"CSVUploader\");","map":{"version":3,"names":["React","useState","Papa","jsxDEV","_jsxDEV","Fragment","_Fragment","CSVUploader","_s","total","setTotal","handleFileChange","event","file","target","files","parseCSV","parse","complete","result","calculateTotal","data","header","totalValue","forEach","row","amount","parseFloat","Amount","isNaN","children","style","display","justifyContent","marginTop","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/megta/Desktop/School/Fall 2023/CS588 Software Eng/Project/project/defect-prediction/src/CSVUploader.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nfunction CSVUploader() {\r\n    const [total, setTotal] = useState(0);\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        parseCSV(file);\r\n    };\r\n\r\n    const parseCSV = (file) => {\r\n        Papa.parse(file, {\r\n            complete: (result) => {\r\n                calculateTotal(result.data);\r\n            },\r\n            header: true\r\n        });\r\n    };\r\n\r\n    const calculateTotal = (data) => {\r\n        let totalValue = 0;\r\n        data.forEach(row => {\r\n            // Assuming the column containing the values is named 'Amount'\r\n            const amount = parseFloat(row.Amount);\r\n            if (!isNaN(amount)) {\r\n                totalValue += amount;\r\n            }\r\n        });\r\n        setTotal(totalValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div style = {{display: \"flex\", justifyContent: \"center\", marginTop: \"40vh\"}}>\r\n            <input type=\"file\" accept=\".csv\" onChange={handleFileChange} />\r\n            <span>Total: {total}</span>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CSVUploader;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClCC,QAAQ,CAACH,IAAI,CAAC;EAClB,CAAC;EAED,MAAMG,QAAQ,GAAIH,IAAI,IAAK;IACvBX,IAAI,CAACe,KAAK,CAACJ,IAAI,EAAE;MACbK,QAAQ,EAAGC,MAAM,IAAK;QAClBC,cAAc,CAACD,MAAM,CAACE,IAAI,CAAC;MAC/B,CAAC;MACDC,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC;EAED,MAAMF,cAAc,GAAIC,IAAI,IAAK;IAC7B,IAAIE,UAAU,GAAG,CAAC;IAClBF,IAAI,CAACG,OAAO,CAACC,GAAG,IAAI;MAChB;MACA,MAAMC,MAAM,GAAGC,UAAU,CAACF,GAAG,CAACG,MAAM,CAAC;MACrC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,EAAE;QAChBH,UAAU,IAAIG,MAAM;MACxB;IACJ,CAAC,CAAC;IACFhB,QAAQ,CAACa,UAAU,CAAC;EACxB,CAAC;EAED,oBACInB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,eACA1B,OAAA;MAAK2B,KAAK,EAAI;QAACC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAM,CAAE;MAAAJ,QAAA,gBACzE1B,OAAA;QAAO+B,IAAI,EAAC,MAAM;QAACC,MAAM,EAAC,MAAM;QAACC,QAAQ,EAAE1B;MAAiB;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/DrC,OAAA;QAAA0B,QAAA,GAAM,SAAO,EAACrB,KAAK;MAAA;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC,gBACJ,CAAC;AAEX;AAACjC,EAAA,CArCQD,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAuCpB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}