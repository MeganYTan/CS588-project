{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megta\\\\Desktop\\\\School\\\\Fall 2023\\\\CS588 Software Eng\\\\Project\\\\project\\\\defect-prediction\\\\src\\\\CSVUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CSVUploader() {\n  _s();\n  const [total, setTotal] = useState(0);\n  const [data, setData] = useState({});\n  const handleFileChange = event => {\n    console.log(\"file change\");\n    const file = event.target.files[0];\n    getCSVData(file);\n    console.log(data);\n  };\n  const getCSVData = file => {\n    Papa.parse(file, {\n      complete: result => {\n        console.log(result);\n        setData(result.data);\n      },\n      header: true\n    });\n  };\n  const calculateTotal = data => {\n    console.log(data);\n    let totalValue = 0;\n    data.forEach(row => {\n      // Assuming the column containing the values is named 'Amount'\n      const amount = parseFloat(row.Amount);\n      if (!isNaN(amount)) {\n        totalValue += amount;\n      }\n    });\n    setTotal(totalValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"25vh\",\n        width: \"60vw\",\n        marginLeft: \"20vw\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Random Forest Regression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Total: \", total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"OpenAI API Prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Total: \", total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(CSVUploader, \"x7UcQrjGbo3OUJa9Kud5n3if25I=\");\n_c = CSVUploader;\nexport default CSVUploader;\nvar _c;\n$RefreshReg$(_c, \"CSVUploader\");","map":{"version":3,"names":["React","useState","Papa","jsxDEV","_jsxDEV","Fragment","_Fragment","CSVUploader","_s","total","setTotal","data","setData","handleFileChange","event","console","log","file","target","files","getCSVData","parse","complete","result","header","calculateTotal","totalValue","forEach","row","amount","parseFloat","Amount","isNaN","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","marginTop","width","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/megta/Desktop/School/Fall 2023/CS588 Software Eng/Project/project/defect-prediction/src/CSVUploader.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nfunction CSVUploader() {\r\n    const [total, setTotal] = useState(0);\r\n    const [data, setData] = useState({});\r\n\r\n    const handleFileChange = (event) => {\r\n        console.log(\"file change\");\r\n        const file = event.target.files[0];\r\n        getCSVData(file);\r\n        console.log(data);\r\n    };\r\n\r\n    const getCSVData = (file) => {\r\n        Papa.parse(file, {\r\n            complete: (result) => {\r\n                console.log(result);\r\n                setData(result.data);\r\n            },\r\n            header: true\r\n        });\r\n    };\r\n\r\n    const calculateTotal = (data) => {\r\n        console.log(data);\r\n        let totalValue = 0;\r\n        data.forEach(row => {\r\n            // Assuming the column containing the values is named 'Amount'\r\n            const amount = parseFloat(row.Amount);\r\n            if (!isNaN(amount)) {\r\n                totalValue += amount;\r\n            }\r\n        });\r\n        setTotal(totalValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" accept=\".csv\" onChange={handleFileChange} />\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"25vh\", width: \"60vw\", marginLeft: \"20vw\" }}>\r\n                <div>\r\n                    <h2>Random Forest Regression</h2>\r\n                    <span>Total: {total}</span>\r\n                </div>\r\n                <div>\r\n                    <h2>OpenAI API Prediction</h2>\r\n                    <span>Total: {total}</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CSVUploader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}